// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add-ssr angular.json should be configured properly 1`] = `
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "newProjectRoot": "",
  "projects": {
    "schematics-test": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "configurations": {
            "development": {
              "extractLicenses": false,
              "optimization": false,
              "sourceMap": true,
            },
            "noSsr": {
              "prerender": false,
              "ssr": false,
            },
            "production": {
              "budgets": [
                {
                  "maximumError": "3.5mb",
                  "maximumWarning": "500kb",
                  "type": "initial",
                },
                {
                  "maximumError": "4kb",
                  "maximumWarning": "2kb",
                  "type": "anyComponentStyle",
                },
              ],
              "outputHashing": "all",
            },
          },
          "defaultConfiguration": "production",
          "options": {
            "assets": [
              "src/favicon.ico",
              "src/assets",
            ],
            "browser": "src/main.ts",
            "index": "src/index.html",
            "inlineStyleLanguage": "scss",
            "outputPath": "dist/schematics-test",
            "polyfills": [
              "zone.js",
            ],
            "prerender": false,
            "scripts": [],
            "server": "src/main.server.ts",
            "ssr": {
              "entry": "server.ts",
            },
            "stylePreprocessorOptions": {
              "includePaths": [
                "node_modules/",
              ],
            },
            "styles": [
              "src/styles.scss",
            ],
            "tsConfig": "tsconfig.app.json",
          },
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "buildTarget": "schematics-test:build",
          },
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "development": {
              "buildTarget": "schematics-test:build:development,noSsr",
            },
            "production": {
              "buildTarget": "schematics-test:build:production,noSsr",
            },
          },
          "defaultConfiguration": "development",
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "assets": [
              "src/favicon.ico",
              "src/assets",
            ],
            "inlineStyleLanguage": "scss",
            "polyfills": [
              "zone.js",
              "zone.js/testing",
            ],
            "scripts": [],
            "stylePreprocessorOptions": {
              "includePaths": [
                "node_modules/",
              ],
            },
            "styles": [
              "src/styles.scss",
            ],
            "tsConfig": "tsconfig.spec.json",
          },
        },
      },
      "prefix": "app",
      "projectType": "application",
      "root": "",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false,
          "style": "scss",
        },
        "@schematics/angular:directive": {
          "standalone": false,
        },
        "@schematics/angular:pipe": {
          "standalone": false,
        },
      },
      "sourceRoot": "src",
    },
  },
  "version": 1,
}
`;

exports[`add-ssr app.module.server.ts should be updated 1`] = `
"import { NgModule } from '@angular/core';
import { ServerModule } from '@angular/platform-server';

import { AppModule } from './app.module';
import { AppComponent } from './app.component';
import { provideServer } from '@spartacus/setup/ssr';

@NgModule({
  imports: [
    AppModule,
    ServerModule,
  ],
  bootstrap: [AppComponent],
  providers: [
    ...provideServer({
       serverRequestOrigin: process.env['SERVER_REQUEST_ORIGIN'],
     }),
  ],
})
export class AppServerModule {}
"
`;

exports[`add-ssr app.module.ts should be updated 1`] = `
"import { provideHttpClient, withFetch, withInterceptorsFromDi } from "@angular/common/http";
import { NgModule } from '@angular/core';
import { BrowserModule,  } from '@angular/platform-browser';
import { EffectsModule } from "@ngrx/effects";
import { StoreModule } from "@ngrx/store";
import { AppRoutingModule } from "@spartacus/storefront";
import { AppComponent } from './app.component';
import { SpartacusModule } from './spartacus/spartacus.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    StoreModule.forRoot({}),
    AppRoutingModule,
    EffectsModule.forRoot([]),
    SpartacusModule
  ],
  providers: [provideHttpClient(withFetch(), withInterceptorsFromDi()),],
  bootstrap: [AppComponent]
})
export class AppModule { }
"
`;

exports[`add-ssr index.html should contain occ-backend-base-url attribute in meta tags 1`] = `
"<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>SchematicsTest</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <meta name="occ-backend-base-url" content="https://localhost:9002" />
</head>
<body>
  <app-root></app-root>
</body>
</html>
"
`;

exports[`add-ssr server.ts should be configured properly 1`] = `
"import { APP_BASE_HREF } from '@angular/common';
import {
  NgExpressEngineDecorator,
  ngExpressEngine as engine,
} from '@spartacus/setup/ssr';
import express from 'express';
import { dirname, join, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import AppServerModule from './src/main.server';

const ngExpressEngine = NgExpressEngineDecorator.get(engine);

// The Express app is exported so that it can be used by serverless Functions.
export function app(): express.Express {
  const server = express();
  const serverDistFolder = dirname(fileURLToPath(import.meta.url));
  const browserDistFolder = resolve(serverDistFolder, '../browser');
  const indexHtml = join(browserDistFolder, 'index.html');

  server.set('trust proxy', 'loopback');

  server.engine(
    'html',
    ngExpressEngine({
      bootstrap: AppServerModule,
    })
  );

  server.set('view engine', 'html');
  server.set('views', browserDistFolder);

  // Serve static files from /browser
  server.get(
    '*.*',
    express.static(browserDistFolder, {
      maxAge: '1y',
    })
  );

  // All regular routes use the Universal engine
  server.get('*', (req, res) => {
    res.render(indexHtml, {
      req,
      providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],
    });
  });

  return server;
}

function run() {
  const port = process.env['PORT'] || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(\`Node Express server listening on http://localhost:\${port}\`);
  });
}

run();
"
`;
